{"version":3,"sources":["logo.svg","App.js","serviceWorker.js","index.js"],"names":["module","exports","style","bar","showBar","background","height","display","justifyContent","flexDirection","alignItems","buttonContainer","button","isActive","color","padding","fontSize","borderRadius","pointer","WebkitUserSelect","MozUserSelect","MsUserSelect","boxShadow","link","textDecoration","control","margin","playPause","width","seek","angle","barShown","position","right","durationRE","RegExp","videoIdRE","anyPlaying","vods","playing","App","React","useState","authToken","setAuthToken","useEffect","fetch","process","method","then","resp","json","data","access_token","active","vodState","setVodState","vodsRef","useRef","current","activeVod","newVodText","setNewVodText","smartMute","setSmartMute","smartPlay","setSmartPlay","showTopBar","setShowTopBar","showBottomBar","setShowBottomBar","error","setError","boxSize","windowSize","boxes","ratio","adjustedWindowSize","bestBox","rows","cols","Math","ceil","w","h","findBoxSize","undefined","setWindowSize","handleResize","window","innerWidth","innerHeight","addEventListener","removeEventListener","useWindowSize","length","interval","setInterval","anyActive","newActive","i","player","ref","getInternalPlayer","getMuted","muted","console","log","clearTimeout","flexGrow","flexBasis","marginLeft","marginRight","maxHeight","overflow","boxSizing","icon","faTimes","className","onClick","type","value","onChange","e","target","size","placeholder","border","outline","paddingLeft","match","vodId","headers","vodData","start","Date","created_at","end","getTime","durationString","parseInt","getMilliseconds","duration","isFirstVod","concat","id","createRef","volume","showButtons","buttonTimeoutRef","message","status","catch","href","top","faAngleUp","faAngleDown","bottom","alignContent","flexWrap","minWidth","map","vod","index","key","onMouseEnter","setTimeout","onMouseMove","visibility","currentSeconds","getCurrentTime","currentTime","syncVods","v","user_name","push","offset","seekTo","splice","url","controls","config","twitch","options","time","autoplay","onPlay","onPause","progressInterval","flex","latestVod","faUndo","faPause","faPlay","anyVodsPlaying","faRedo","Boolean","location","hostname","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.8b7fba13.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport ReactPlayer from 'react-player/twitch'\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\nimport { faPlay, faPause, faRedo, faUndo, faAngleUp, faAngleDown, faTimes } from '@fortawesome/free-solid-svg-icons'\n\nconst minHeight = 300\nconst defaultVolume = .5\nconst progressInterval = 1000\nconst twitchPurple = \"#9147ff\"\n\nconst style= {\n  bar: showBar => ({\n    background: \"#333333\",\n    height: showBar ? 52 : 0,\n    display: showBar ? \"flex\" : \"none\",\n    justifyContent: \"center\",\n    flexDirection: \"row\",\n    alignItems: \"center\",\n  }),\n  buttonContainer: {\n    display: \"flex\",\n    alignItems: \"center\",\n  },\n  button: isActive => ({\n    background: \"#bdbdbd\",\n    color: \"#2b2b2b\",\n    padding: \"1px 5px\",\n    fontSize: \"13px\",\n    borderRadius: \"2px\",\n    display: \"flex\",\n    alignItems: \"center\",\n    justifyContent: \"center\",\n    pointer: \"cursor\",\n    WebkitUserSelect: \"none\",\n    MozUserSelect: \"none\",\n    MsUserSelect: \"none\",\n    height: \"26px\",\n    boxShadow: isActive ? `inset 1px 1px 3px ${twitchPurple}, inset -1px -1px 3px ${twitchPurple}` : \"\",\n  }),\n  link: {\n    color: \"#bdbdbd\",\n    textDecoration: \"none\",\n  },\n  control: {\n    margin: \"9px\",\n    color: \"#bdbdbd\",\n    WebkitUserSelect: \"none\",\n    MozUserSelect: \"none\",\n    MsUserSelect: \"none\",\n  },\n  playPause: {\n    width: \"28px\",\n    height: \"28px\",\n  },\n  seek: {\n    width: \"18px\",\n    height: \"18px\",\n  },\n  angle: barShown => ({\n    width: \"20px\",\n    height: \"20px\",\n    margin: \"9px 9px\",\n    WebkitUserSelect: \"none\",\n    MozUserSelect: \"none\",\n    MsUserSelect: \"none\",\n    borderRadius: \"4px\",\n    padding: \"7px\",\n    color: barShown ? \"black\" : \"white\",\n    position: \"absolute\",\n    right: 0,\n  }),\n}\n\nconst durationRE = new RegExp(/(?:(\\d+)h)?(?:(\\d+)m)?(?:(\\d+)s)?/)\nconst videoIdRE = new RegExp(/^(\\d\\d\\d\\d\\d\\d\\d\\d\\d)$|.*twitch\\.tv\\/videos\\/(\\d\\d\\d\\d\\d\\d\\d\\d\\d)$/)\n\n// Ratio is width:height.\nfunction findBoxSize(windowSize, boxes, ratio, showTopBar, showBottomBar) {\n  const adjustedWindowSize = {\n    width: windowSize.width,\n    height: windowSize.height-(style.bar(showTopBar).height+style.bar(showBottomBar).height),\n  }\n  let bestBox = {width: minHeight*ratio, height: minHeight}\n  // let bestBox = {width: 0, height: 0}\n  for (let rows = 1; rows <= boxes; rows++) {\n    let cols = Math.ceil(boxes/rows)\n    if (adjustedWindowSize.height*ratio/rows > adjustedWindowSize.width/cols) {\n      // Width bottlenecked\n      let w = adjustedWindowSize.width/cols\n      if (w > bestBox.width) {\n        bestBox = {width: w, height: w/ratio}\n      }\n    } else {\n      // Height bottlenecked\n      let h = adjustedWindowSize.height/rows\n      if (h > bestBox.height) {\n        bestBox = {width: h*ratio, height: h}\n      }\n    }\n  }\n  return bestBox\n}\n\nfunction anyPlaying(vods) {\n  for (let v of vods) {\n    if (v.playing) {\n      return true\n    }\n  }\n  return false\n}\n\nfunction getUnmutedIndex(vods) {\n  for (let i = 0; i < vods.length; i++) {\n    if (!vods[i].muted) {\n      return i\n    }\n  }\n  return -1\n}\n\nfunction isProbablyInitialJump(diff) {\n  const threshhold = 2 // seconds.\n  return Math.abs(diff*1000 - progressInterval) < threshhold*1000\n}\n\n// Adapted from https://usehooks.com/useWindowSize/\nfunction useWindowSize() {\n  // Initialize state with undefined width/height so server and client renders match\n  // Learn more here: https://joshwcomeau.com/react/the-perils-of-rehydration/\n  const [windowSize, setWindowSize] = React.useState({\n    width: undefined,\n    height: undefined,\n  });\n\n  React.useEffect(() => {\n    // Handler to call on window resize\n    function handleResize() {\n      // Set window width/height to state\n      setWindowSize({\n        width: window.innerWidth,\n        height: window.innerHeight,\n      });\n    }\n\n    // Add event listener\n    window.addEventListener(\"resize\", handleResize);\n\n    // Call handler right away so state gets updated with initial window size\n    handleResize();\n\n    // Remove event listener on cleanup\n    return () => window.removeEventListener(\"resize\", handleResize);\n  }, []); // Empty array ensures that effect is only run on mount\n\n  return windowSize;\n}\n\nfunction getMilliseconds(durationString) {\n  let match = durationString.match(durationRE)\n  const msFromSecs = parseInt(match[3]) * 1000\n  const msFromMins = parseInt(match[2]) * 60 * 1000\n  const msFromHours = parseInt(match[1]) * 60 * 60 * 1000\n  return msFromSecs + msFromMins + msFromHours\n}\n\nfunction toTwitchTime(seconds) {\n  let secondsLeft = seconds\n  const hours = Math.floor(secondsLeft/(60*60))\n  secondsLeft = secondsLeft - hours*60*60\n  const minutes = Math.floor(secondsLeft/60)\n  secondsLeft = secondsLeft - minutes*60\n  return `${hours}h${minutes}m${secondsLeft}s`\n}\n\n\n// let vods = [\"775614397\", \"775477240\", \"775309607\"]\n// let vods = [\"775614397\"]\n\n\nfunction App() {\n  const [authToken, setAuthToken] = React.useState(\"\")\n  React.useEffect(() => {\n    if (authToken === \"\") {\n      fetch(`https://id.twitch.tv/oauth2/token?client_id=${process.env.REACT_APP_TWITCH_CLIENT_ID}&client_secret=${process.env.REACT_APP_TWITCH_SECRET}&grant_type=client_credentials`, {\n        method: 'POST',\n      })\n        .then(resp => resp.json())\n        .then(data => setAuthToken(data.access_token))\n    }\n  })\n\n  // const [vods, setVods] = React.useState([])\n  const [vodState, setVodState] = React.useState({\n    active: -1,\n    vods: [],\n  })\n\n  // These are used when we need to asynchronously remove buttons, which accidentally delete vods\n  // sometimes due to not knowing new vods were added.\n  const vodsRef = React.useRef(vodState.vods)\n  vodsRef.current = vodState.vods\n  const activeVod = React.useRef(vodState.active)\n  activeVod.current = vodState.active\n\n  const [newVodText, setNewVodText] = React.useState(\"775309607\")\n\n  const [smartMute, setSmartMute] = React.useState(true)\n  const [smartPlay, setSmartPlay] = React.useState(true)\n  const [showTopBar, setShowTopBar] = React.useState(true)\n  const [showBottomBar, setShowBottomBar] = React.useState(true)\n  const [play, setPlay] = React.useState(true)\n  const [error, setError] = React.useState(\"\")\n\n  const windowSize = useWindowSize()\n  const boxSize = findBoxSize(windowSize, vodState.vods.length, 16/9, showTopBar, showBottomBar)\n\n  // In charge of making sure vods maintain a single mute.\n  React.useEffect(() => {\n    // Set interval to watch for change in mutes.\n    const interval = setInterval(() => {\n      try {\n        if (smartMute) {\n          let anyActive = false\n          let newActive = -1\n          for (let i = 0; i < vodState.vods.length; i++) {\n            let player = vodState.vods[i].ref.current.getInternalPlayer()\n            if (player !== undefined) {\n              let muted = player.getMuted()\n              if (!muted) {\n                anyActive = true\n                // If this is a new active vod, remember it.\n                if (i !== vodState.active) {\n                  newActive = i\n                }\n              }\n            }\n          }\n          if (newActive !== -1) {\n            vodState.vods[newActive].muted = false\n            if (vodState.active !== -1) {\n              vodState.vods[vodState.active].muted = true\n            }\n            setVodState({\n              active: newActive,\n              vods: vodState.vods,\n            })\n          } else {\n            setVodState({\n              active: anyActive ? vodState.active : -1,\n              vods: vodState.vods,\n            })\n          }\n        }\n      } catch (error) {\n        setVodState({\n          active: -1,\n          vods: vodsRef.current,\n        })\n        console.log(error)\n      }\n    }, 50)\n    return () => clearTimeout(interval)\n  })\n\n  return (\n    <div\n      style={{\n        display: \"flex\",\n        height: \"100vh\",\n        width: \"100vw\",\n        flexDirection: \"column\",\n        background: \"black\",\n      }}\n    >\n      {/* Header */}\n      <div style={{...style.bar(showTopBar)}}>\n        {/* Left of input */}\n        <div style={{display: \"flex\", flexGrow: 1, flexBasis: 0, alignItems: \"center\"}}>\n          {/* Error message */}\n          <div style={{\n            display: error === \"\" ? \"none\" : \"flex\",\n            alignItems: \"center\",\n            marginLeft: \"10px\",\n            marginRight: \"10px\",\n            padding: \"4px\",\n            fontSize: \"13px\",\n            background: \"#757575\",\n            boxShadow: \"0 0 0 1px #b50000\",\n            borderRadius: \"2px\",\n            maxHeight: `${style.bar(true).height-8}px`,\n            overflow: \"scroll\",\n            boxSizing: \"border-box\",\n          }}>\n            <div>{error}</div>\n            <FontAwesomeIcon icon={faTimes} className=\"closeError\"\n              style={{\n                width: \"13px\",\n                height: \"13px\",\n                padding: \"3px\",\n                marginLeft: \"7px\",\n                borderRadius: \"2px\",\n              }}\n              onClick={() => {setError(\"\")}}\n            />\n          </div>\n        </div>\n        {/* Inputs */}\n        <div style={style.buttonContainer}>\n          <input\n            type=\"text\"\n            value={newVodText}\n            onChange={e => setNewVodText(e.target.value)}\n            size=\"50\"\n            placeholder=\"http://twitch.tv/videos/123456789 or 123456789\"\n            style={{\n              background: \"#cfcfcf\",\n              border: \"none\",\n              outline: \"none\",\n              borderRadius: \"2px\",\n              paddingLeft: \"5px\",\n              height: style.button(false).height,\n            }}\n          />\n          <div\n            style={{\n              ...style.button(false),\n              marginLeft: \"5px\",\n            }}\n            onClick={() => {\n              const match = newVodText.match(videoIdRE)\n              if (match !== null) {\n                const vodId = match[2] === undefined ? match[1] : match[2]\n                fetch(`https://api.twitch.tv/helix/videos?id=${vodId}`, {\n                  headers: {\n                    \"Authorization\": `Bearer ${authToken}`,\n                    \"Client-Id\": process.env.REACT_APP_TWITCH_CLIENT_ID,\n                  }\n                })\n                  .then(resp => resp.json())\n                  .then(data => {\n                    if (data.error === undefined) {\n                      // Find starting and ending times for this video.\n                      const vodData = data.data[\"0\"]\n                      const start = new Date(vodData.created_at)\n                      const end = new Date(start.getTime() + getMilliseconds(vodData.duration))\n\n                      // If this is the first vod, it should be unmuted. Otherwise, add it as by default\n                      // muted.\n                      const isFirstVod = (vodState.vods.length === 0)\n\n                      setVodState({\n                        active: isFirstVod ? 0 : vodState.active,\n                        vods: vodState.vods.concat({\n                          id: vodId,\n                          start: start,\n                          end: end,\n                          ref: React.createRef(),\n                          playing: false,\n                          volume: defaultVolume,\n                          muted: !isFirstVod,\n                          showButtons: false,\n                          buttonTimeoutRef: React.createRef(),\n                          vodData: vodData,\n                        })\n                      })\n                    } else {\n                      setError(`API Error: ${data.error}, message: ${data.message} (status: ${data.status})`)\n                    }\n                  }).catch(error => setError(`Error adding video: ${error}`))\n              } else {\n                // No match, show error.\n                setError(`Could not parse video from text \"${newVodText}\"`)\n              }\n              setNewVodText(\"\")\n            }}\n          >\n            Add Video\n          </div>\n        </div>\n        {/* Right of input */}\n        <div\n          style={{\n            flexGrow: 1,\n            flexBasis: 0,\n            display: \"flex\",\n            justifyContent: \"flex-end\",\n            alignItems: \"center\",\n          }}>\n          <a href=\"https://github.com/henryperson/twitchsync\" style={{...style.link, marginRight: \"20px\", fontSize: \"14px\"}}>Source</a>\n          <a href=\"https://www.buymeacoffee.com/henryperson\" style={{...style.link, marginRight: \"60px\", fontSize: \"14px\"}}>Buy Me Coffee</a>\n        </div>\n      </div>\n      {/* Hide/show top/bottom bar icons */}\n      <FontAwesomeIcon\n        className=\"showhide\"\n        style={{...style.angle(showTopBar), top: 0}}\n        icon={showTopBar ? faAngleUp : faAngleDown}\n        onClick={() => setShowTopBar(!showTopBar)}\n      />\n      <FontAwesomeIcon\n        className=\"showhide\"\n        style={{...style.angle(showBottomBar), bottom: 0}}\n        icon={showBottomBar ? faAngleDown: faAngleUp}\n        onClick={() => setShowBottomBar(!showBottomBar)}\n      />\n      {/* Main body */}\n      <div\n        style={{\n          flexGrow: 1,\n          display: \"flex\",\n          flexDirection: \"row\",\n          justifyContent: \"center\",\n          alignItems: \"center\",\n          alignContent: \"center\",\n          flexBasis: 0,\n          flexWrap: \"wrap\",\n          minWidth: \"0%\",\n        }}>\n        {vodState.vods.map((vod, index) => {\n          return (\n            <div\n              key={index}\n              style={{\n                width: boxSize.width,\n                height: boxSize.height,\n                boxSizing: \"border-box\",\n                padding: \"2px\",\n                position: \"relative\",\n              }}\n              onMouseEnter={() => {\n                vod.showButtons = true\n                setVodState({\n                  active: vodState.active,\n                  vods: vodState.vods,\n                })\n                if (vod.buttonTimeoutRef !== null) {\n                  clearTimeout(vod.buttonTimeoutRef.current)\n                }\n                vod.buttonTimeoutRef.current = setTimeout(() => {\n                  vod.showButtons = false\n                  setVodState({\n                    active: activeVod.current,\n                    vods: vodsRef.current,\n                  })\n                }, 2000)\n              }}\n            >\n              {/* Buttons for closing */}\n              <div\n                style={{\n                  position: \"absolute\",\n                  top: 0,\n                  right: 0,\n                  display: \"flex\",\n                  margin: \"12px\",\n                }}\n                // TODO: maybe don't repeat this code if it can be made a function without the\n                // rendering no longer working?\n                onMouseMove={() => {\n                  vod.showButtons = true\n                  setVodState({\n                    active: vodState.active,\n                    vods: vodState.vods,\n                  })\n                  if (vod.buttonTimeoutRef !== null) {\n                    clearTimeout(vod.buttonTimeoutRef.current)\n                  }\n                  vod.buttonTimeoutRef.current = setTimeout(() => {\n                    vod.showButtons = false\n                    setVodState({\n                      active: activeVod.current,\n                      vods: vodsRef.current,\n                    })\n                  }, 2000)\n                }}\n              >\n                {/* Sync button */}\n                <div\n                  style={{\n                    ...style.button(false),\n                    marginRight: \"10px\",\n                    visibility: vod.showButtons ? \"visible\" : \"hidden\",\n                  }}\n                  onClick={() => {\n                    // Check if the videos are syncable.\n                    const currentSeconds = vod.ref.current.getCurrentTime()\n                    console.log(\"currentSeconds\", currentSeconds)\n                    const currentTime = new Date(vod.start.getTime() + currentSeconds*1000)\n                    console.log(\"start\", vod.start)\n                    console.log(\"current time\", currentTime)\n                    let syncVods = []\n                    for (let i = 0; i < vodState.vods.length; i++) {\n                      const v = vodState.vods[i]\n                      if (v.end < currentTime || v.start > currentTime) {\n                        setError(`Cannot sync ${v.vodData.user_name} (id ${v.id})`)\n                      } else if (i !== index) {\n                        syncVods.push(v)\n                      }\n                    }\n                    // Sync them.\n                    for (let v of syncVods) {\n                      let offset = (vod.start - v.start)/1000\n                      v.ref.current.seekTo(currentSeconds+offset, \"seconds\")\n                    }\n                  }}\n                >\n                  Sync To This\n                </div>\n                {/* Close button */}\n                <FontAwesomeIcon icon={faTimes}\n                  style={{\n                    ...style.button(false),\n                    width: \"16px\",\n                    height: \"16px\",\n                    padding: \"6px\",\n                    visibility: vod.showButtons ? \"visible\" : \"hidden\",\n                  }}\n                  onClick={() => {\n                    if (vod.buttonTimeoutRef !== null) {\n                      clearTimeout(vod.buttonTimeoutRef.current)\n                    }\n                    vodState.vods.splice(index, 1)\n                    setVodState({\n                      active: vodState.active === index ? -1 : vodState.active,\n                      vods: vodState.vods,\n                    })\n                  }}\n                />\n              </div>\n              {/* Player itself */}\n              <ReactPlayer\n                ref={vod.ref}\n                url={\"https://www.twitch.tv/videos/\" + vod.id}\n                width=\"100%\"\n                height=\"100%\"\n                controls={true}\n                config={{\n                  twitch: {\n                    options: {\n                      time: \"0h0m0s\",\n                      autoplay: false,\n                    },\n                  },\n                }}\n                volume={vod.volume}\n                muted={vod.muted}\n                playing={vod.playing}\n                onPlay={() => {\n                  if (smartPlay) {\n                    for (let v of vodState.vods) {\n                      v.playing = true\n                    }\n                  }\n                  vod.playing = true\n                  setVodState({\n                    active: vodState.active,\n                    vods: vodState.vods,\n                  })\n                }}\n                onPause={() => {\n                  if (smartPlay) {\n                    for (let v of vodState.vods) {\n                      v.playing = false\n                    }\n                  }\n                  vod.playing = false\n                  setVodState({\n                    active: vodState.active,\n                    vods: vodState.vods,\n                  })\n                }}\n                progressInterval={progressInterval}\n              />\n            </div>\n          )\n        })}\n      </div>\n      {/* Footer */}\n      <div\n        style={{\n          ...style.bar(showBottomBar),\n        }}\n      >\n        <div style={{...style.buttonContainer, flex: \"1 0 0\", justifyContent: \"flex-start\"}}>\n        <div style={{...style.button(false), margin: \"10px\"}}\n            onClick={() => {\n              if (vodState.vods.length > 0) {\n                // Find the latest vod.\n                let latestVod = vodState.vods[0]\n                for (let vod of vodState.vods) {\n                  if (vod.start > latestVod.start) {\n                    latestVod = vod\n                  }\n                }\n                // Confirm that we can seek to this time in all vods.\n                for (let vod of vodState.vods) {\n                  if (vod.end < latestVod.start) {\n                    setError(`Can't sync: ${vod.vodData.user_name} video (id ${vod.id}) ends before ${latestVod.vodData.user_name} video (id ${latestVod.id}) begins`)\n                    return\n                  }\n                }\n                // Sync the vods.\n                for (let vod of vodState.vods) {\n                  const seekTo = (latestVod.start - vod.start)/1000\n                  vod.ref.current.seekTo(seekTo)\n                }\n              }\n            }}\n          >\n            Earliest Sync\n          </div>\n          <div style={{...style.button(smartMute), margin: \"10px\", width: \"95px\"}}\n            onClick={() => setSmartMute(!smartMute)}\n          >\n            Smart Mute {smartMute ? \"On\" : \"Off\"}\n          </div>\n          <div style={{...style.button(smartPlay), margin: \"10px\", width: \"95px\"}}\n            onClick={() => setSmartPlay(!smartPlay)}\n          >\n            Smart Play {smartPlay ? \"On\" : \"Off\"}\n          </div>\n        </div>\n        {/* Central controls */}\n        <div style={style.buttonContainer}>\n          {/* Back 10 seconds */}\n          <FontAwesomeIcon style={{...style.control, ...style.seek}} icon={faUndo}\n            onClick={() => {\n              setSmartPlay(true)\n              for (let v of vodState.vods) {\n                v.playing = true\n              }\n              setVodState({\n                active: vodState.active,\n                vods: vodState.vods,\n              })\n              for (let v of vodState.vods) {\n                let currentTime = v.ref.current.getCurrentTime()\n                v.ref.current.seekTo(currentTime - 10)\n              }\n            }}\n          />\n          {/* Play/pause */}\n          <FontAwesomeIcon style={{...style.control, ...style.playPause}}\n            icon={anyPlaying(vodState.vods) ? faPause : faPlay}\n            onClick={() => {\n              setSmartPlay(true)\n              let anyVodsPlaying = anyPlaying(vodState.vods)\n              for (let v of vodState.vods) {\n                v.playing = !anyVodsPlaying\n              }\n              setVodState({\n                active: vodState.active === -1 ? 0 : vodState.active,\n                vods: vodState.vods,\n              })\n            }}\n          />\n          {/* Forward 10 seconds */}\n          <FontAwesomeIcon style={{...style.control, ...style.seek}} icon={faRedo}\n            onClick={() => {\n              setSmartPlay(true)\n              for (let v of vodState.vods) {\n                v.playing = true\n              }\n              setVodState({\n                active: vodState.active,\n                vods: vodState.vods,\n              })\n              for (let v of vodState.vods) {\n                let currentTime = v.ref.current.getCurrentTime()\n                v.ref.current.seekTo(currentTime + 10)\n              }\n            }}\n          />\n        </div>\n        <div style={{...style.buttonContainer, flex: \"1 0 0\", justifyContent: \"flex-end\"}}>\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}